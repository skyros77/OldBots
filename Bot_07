package mo;
import robocode.*;
import java.awt.geom.*;
import java.util.*;
import static robocode.util.Utils.*;
import java.awt.Color;
import java.awt.Graphics2D;
 
public class Bot_v7 extends AdvancedRobot
{

	private static final double MV				= Rules.MAX_VELOCITY; //10
	private static final double MTR				= Rules.MAX_TURN_RATE; //8
	private static final double PATTERN_LENGTH	= 500;
	private static final double MATCH_LENGTH 	= 3;
	private static final double	FIRE_POWER		= .1;
	private static final double	FIRE_SPEED		= Rules.getBulletSpeed(FIRE_POWER); //20 - (3 * power)
	
	static LinkedHashMap<String,Object> enemies;
	static int patternLength = 30;
	static EnemyData target;
	static double scanDir;
	static Object scanTarget = null;

	Point2D.Double cPos;
	Point2D.Double pPos;
	Point2D.Double gunTracker;
	Point2D.Double radarTracker;

	//pattern matcher
		static int n;
		static double ev[] = new double[50000];
	//	static StringBuffer pattern = new StringBuffer();
		static StringBuilder pattern;
		static StringBuilder match;
		double pHeading;
		static Point2D.Double enemyP;
		static Point2D.Double predict;
				double a;

	public void run()
	{
		enemies = new LinkedHashMap<String,Object>(5, 2, true);
		pattern = new StringBuilder();
		match = new StringBuilder();
		target = new EnemyData();
        setAdjustGunForRobotTurn(true);
        setAdjustRadarForGunTurn(true);
		scanDir = 1;
		setTurnRadarRightRadians(scanDir * Double.POSITIVE_INFINITY);
		while(true) {
			//setTurnRadarRightRadians(scanDir * Double.POSITIVE_INFINITY);
			scan();
		}
	}


	
	public void onScannedRobot(ScannedRobotEvent e)
	{
		EnemyData en = (EnemyData)enemies.get(e.getName());
		if(en == null) {
			en = new EnemyData();
			enemies.put(e.getName(), en);
		}
			
		en.time			= getTime();	
		en.heading		= e.getHeadingRadians();
		en.absBearing	= e.getBearingRadians() + getHeadingRadians();
		en.vel			= e.getVelocity();
		//en.pos		= new Point2D.Double(getX() + Math.sin(en.absBearing) * en.distance, getY() + Math.cos(en.absBearing) * en.distance);
		//en.x			= Math.sin(en.absBearing)* en.distance + Math.sin(en.heading) * en.velocity - Math.sin(getHeadingRadians()) * getVelocity();
		//en.y			= Math.cos(en.absBearing)* en.distance + Math.cos(en.heading) * en.velocity - Math.cos(getHeadingRadians()) * getVelocity();

		//Iterate through targets and rotate radar.  This is more efficient than 360 sweeps but uses more memory
		if (getOthers() == 1) {
			setTurnRadarRightRadians(normalRelativeAngle(getHeadingRadians() + e.getBearingRadians() - getRadarHeadingRadians())); 
		}
		else {
			if (e.getName() == scanTarget || scanTarget == null && enemies.size() == getOthers()) {
				scanTarget = enemies.keySet().iterator().next();

				scanDir = normalRelativeAngle(((EnemyData)enemies.get(scanTarget)).absBearing - getRadarHeadingRadians());
				setTurnRadarRightRadians(scanDir * Double.POSITIVE_INFINITY);
			}
		}
		
		//Enemy Position
		Point2D.Double myP = new Point2D.Double(getX(), getY());
		enemyP = project(myP, en.absBearing, e.getDistance());

		//Pattern Matching
		Point2D.Double eTick = new Point2D.Double(e.getHeadingRadians(), e.getVelocity());
		char symbol = (char)(19*Math.rint(Math.toDegrees(eTick.x-pHeading)+MTR)+eTick.y+MV);	
		pattern.append(symbol);
		match.append(symbol);
		
		if (match.length()>MATCH_LENGTH) match.deleteCharAt(0);	
		if (pattern.length()>PATTERN_LENGTH) pattern.deleteCharAt(0);
		
		int offset = (int)Math.rint(myP.distance(enemyP)/FIRE_SPEED);
		

		out.println(offset);
		int index = (pattern.indexOf(match.toString()) != pattern.length()-match.length()) ? pattern.indexOf(match.toString()) : -1;


		while(index != -1 && index <= offset)
		{
			a += Math.toRadians(pattern.charAt(index)/19-MTR);
			out.println(a);
		}

		
		/*
		//cal
		out.println(
		"distance: " + myP.distance(enemyP) + "\n" +
		"fire speed: " + FIRE_SPEED + "\n" +
		"pattern: " + pattern + "\n" +
		"match: " + match + "\n" +
		"index offset: "+ offset + "\n" +
		"index/char: " + index + "/" + a + "\n" + 
		"predict: " + predict.x  + "/" + predict.y  + "\n\n"
		);
	*/
		//decode symbols
		//Point2D.Double decode = new Point2D.Double(Math.toRadians(symbol/19-MTR),symbol%19-MV);
		//enemyP = project(enemyP, decode.x, decode.y);
	//	enemyP = project(enemyP, predict.x, predict.y);
		
		//turn gun
		double absoluteBearing = Math.atan2(enemyP.x - myP.x, enemyP.y - myP.y);
		double gunTurn = absoluteBearing - getGunHeadingRadians();
		setTurnGunRightRadians(normalRelativeAngle(gunTurn));
/*
		out.println(
			"base h/v: " + (eTick.x - pHeading) + "/" + eTick.y + "\n" +		
			"symbol/int: " + symbol + "/" + ((int)symbol) + "\n" +
			"result h/v: " + decode + "\n\n"
			);
*/

		pHeading = eTick.x;
		


		//This code goes into the ScannedBot event
			//ev contains the accumulated perpendicular velocity of the enemy
			//pattern contains the velocity of the enemy
			//the pattern matcher calculates the best gun bearing to fire based on target previous movements
			
/*
			double targetBearing;
			setTurnRadarRightRadians(Math.sin((targetBearing = e.getBearingRadians() + getHeadingRadians()) - getRadarHeadingRadians()));
			ev[++n] = ev[n - 1] + e.getVelocity() * Math.sin(e.getHeadingRadians() - targetBearing);
			pattern.append(Character.forDigit((int)e.getVelocity() + 8, 20));
			int pointer = pattern.toString().indexOf(pattern.substring(Math.max(pattern.length() - 10, 0))) + 9;
			setTurnGunRightRadians(Math.sin(((ev[Math.min(pointer + (int)e.getDistance() / 11, n)] - ev[pointer]) / e.getDistance () + targetBearing) - getGunHeadingRadians()));
			//setFire(3);
			
			out.println(pointer);
			*/
		}

			
	public void onRobotDeath(RobotDeathEvent e) {
		enemies.remove(e.getName());
	}

	private static Point2D.Double project(Point2D.Double p, double angle, double distance)
	{
		double x = p.x + distance * Math.sin(angle);
		double y = p.y + distance * Math.cos(angle);
		return new Point2D.Double(x, y);
	}
	
	public void onPaint(Graphics2D g) {	
	
		g.setColor(new Color(255,255,255,100));
		g.fillOval((int)enemyP.x-25, (int)enemyP.y-25, 50, 50);
/*		
		g.setColor(new Color(255,0,0,200));
		g.fillOval((int)enemyP.x-10, (int)enemyP.y-10, 20, 20);
		
		g.setColor(new Color(255,255,255,100));
		g.drawLine((int)getX(), (int)getY(), (int)gunTracker.x, (int)gunTracker.y);


		g.setColor(new Color(255,0,0,200));
		g.fillOval((int)enemyP.x-10, (int)enemyP.y-10, 20, 20);
*/
}




	//revise this depending on how much data I want to save
	public class EnemyData {
		double			vel, pVel;
		double			heading, pHeading;
		double			absBearing;
		long			time;		
		//Point2D.Double	pos;
	}
}
