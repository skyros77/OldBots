package mo;
import robocode.*;
import java.awt.geom.*;
import java.util.*;
import java.util.List;
import java.util.ArrayList;
import static robocode.util.Utils.*;
import java.awt.Color;
import java.awt.Graphics2D;
 
public class Bot_v8 extends AdvancedRobot
{

	private static final double MV				= Rules.MAX_VELOCITY; //10
	private static final double MTR				= Rules.MAX_TURN_RATE; //8
	private static final double PATTERN_LENGTH	= 500;
	private static final double MATCH_LENGTH 	= 3;
	private static final double	FIRE_POWER		= .1;
	private static final double	FIRE_SPEED		= Rules.getBulletSpeed(FIRE_POWER); //20 - (3 * power)
	private static List<Point2D.Double>	predictions			= new ArrayList<Point2D.Double>();
		
	static LinkedHashMap<String,Object> enemies;
	static int patternLength = 30;
	static EnemyData target;
	static double scanDir;
	static Object scanTarget = null;

	Point2D.Double cPos;
	Point2D.Double pPos;
	Point2D.Double gunTracker;
	Point2D.Double radarTracker;

	//pattern matcher
		static int n;
		static double ev[] = new double[50000];
	//	static StringBuffer pattern = new StringBuffer();
		Point2D.Double eTick;
		static StringBuilder pattern;
		static StringBuilder match;
		double pHeading, h, v;
		static Point2D.Double enemyP;
		int increment = 0;
		int index;
	public void run()
	{
		enemies = new LinkedHashMap<String,Object>(5, 2, true);
		pattern = new StringBuilder();
		match = new StringBuilder();
		target = new EnemyData();
        setAdjustGunForRobotTurn(true);
        setAdjustRadarForGunTurn(true);
		scanDir = 1;
		setTurnRadarRightRadians(scanDir * Double.POSITIVE_INFINITY);
		while(true) {
			//setTurnRadarRightRadians(scanDir * Double.POSITIVE_INFINITY);
			scan();
		}
	}


	
	public void onScannedRobot(ScannedRobotEvent e)
	{
		EnemyData en = (EnemyData)enemies.get(e.getName());
		if(en == null) {
			en = new EnemyData();
			enemies.put(e.getName(), en);
		}
			
		en.time			= getTime();	
		en.heading		= e.getHeadingRadians();
		en.absBearing	= e.getBearingRadians() + getHeadingRadians();
		en.vel			= e.getVelocity();
		//en.pos		= new Point2D.Double(getX() + Math.sin(en.absBearing) * en.distance, getY() + Math.cos(en.absBearing) * en.distance);
		//en.x			= Math.sin(en.absBearing)* en.distance + Math.sin(en.heading) * en.velocity - Math.sin(getHeadingRadians()) * getVelocity();
		//en.y			= Math.cos(en.absBearing)* en.distance + Math.cos(en.heading) * en.velocity - Math.cos(getHeadingRadians()) * getVelocity();

		//Iterate through targets and rotate radar.  This is more efficient than 360 sweeps but uses more memory
		if (getOthers() == 1) {
			setTurnRadarRightRadians(normalRelativeAngle(getHeadingRadians() + e.getBearingRadians() - getRadarHeadingRadians())); 
		}
		else {
			if (e.getName() == scanTarget || scanTarget == null && enemies.size() == getOthers()) {
				scanTarget = enemies.keySet().iterator().next();

				scanDir = normalRelativeAngle(((EnemyData)enemies.get(scanTarget)).absBearing - getRadarHeadingRadians());
				setTurnRadarRightRadians(scanDir * Double.POSITIVE_INFINITY);
			}
		}
		
		//Fire Gun
		predictions.clear();
		setFire(FIRE_POWER);

		//Enemy Position
		Point2D.Double myP = new Point2D.Double(getX(), getY());
		enemyP = project(myP, en.absBearing, e.getDistance());


		//Pattern Matching
		double enemyH = e.getHeadingRadians();				
		eTick = new Point2D.Double(enemyH-pHeading, e.getVelocity());
		char symbol = (char)(19*Math.rint(Math.toDegrees(eTick.x)+MTR)+eTick.y+MV);	
		pattern.append(symbol);
		match.append(symbol);
		
		if (match.length()>MATCH_LENGTH) match.deleteCharAt(0);	//turn this into a string
		if (pattern.length()>PATTERN_LENGTH) pattern.deleteCharAt(0);
		
		int time = (int)Math.rint(myP.distance(enemyP)/FIRE_SPEED);
		index = pattern.indexOf(match.toString());
		int offset = index+time;
		Boolean valid = (pattern.length()-offset)>0 ? true : false; //false = outside of the pattern range

	//	int i;
		out.println("new\n");
		for(int i=0; i<10; i++) {
			out.println(
			"pattern("+ pattern.length() + "): " + pattern + "\n" +
			"index: " + index + "(" + pattern.charAt(index) + ")\n"
			);
		};
		
			
/*
		out.println(
		"Pattern(" + pattern.length() + "): " + pattern +"\n" +	
		"Match: " + match + "\n" +
		"Match Valid: " + pattern.indexOf(match.toString()) + "\n" +
		"Pattern Index Start: " + index + "(" + pattern.charAt(index) + ")\n" +
		"Pattern Index Offset: " + incIndex + "\n" +
		"Valid Range: " + valid + "\n\n"
		);
	*/

		//decode symbols
	//	Point2D.Double decode = new Point2D.Double(Math.toRadians(symbol/19-MTR),symbol%19-MV);
		h = 0;
		v = 0;
		for (int d = 0; d < (int)Math.rint(myP.distance(enemyP)/FIRE_SPEED); d++)
		{
			
			//int index = pattern.indexOf(match.toString());
			char s = pattern.charAt(index);
			int p = (int)s;
			enemyH += Math.toRadians(p/19-MTR);
			v = p%19-MV;
			/*
			out.println(
				"d: " + d + "\n" +
				"time: " + (int)Math.rint(myP.distance(enemyP)/FIRE_SPEED) + "\n" +
				"index: " + index + "\n" +
				"symbol H: (" + p + ")" +  s + "\n" +
				"decoded H: " + Math.toRadians(p/19-MTR) + "\n" +				
				"initial H: " + e.getHeadingRadians() + "\n" +					
				"combined H: " + enemyH + "\n\n" 
			);
			*/
			
			enemyP = project(enemyP, enemyH, v);
			predictions.add(enemyP);
		}

	
		//turn gun
		double absoluteBearing = Math.atan2(enemyP.x - myP.x, enemyP.y - myP.y);
		double gunTurn = absoluteBearing - getGunHeadingRadians();
		setTurnGunRightRadians(normalRelativeAngle(gunTurn));
			
		//update previous heading
		pHeading = e.getHeadingRadians();

		/*
		//debug works
		out.println(
			"base h/v: " + eTick + "\n" +		
			"symbol/int: " + symbol + "/" + ((int)symbol) + "\n" +
			"result h/v: " + decode + "\n\n"
			);
		*/


		


		//This code goes into the ScannedBot event
			//ev contains the accumulated perpendicular velocity of the enemy
			//pattern contains the velocity of the enemy
			//the pattern matcher calculates the best gun bearing to fire based on target previous movements
			
/*
			double targetBearing;
			setTurnRadarRightRadians(Math.sin((targetBearing = e.getBearingRadians() + getHeadingRadians()) - getRadarHeadingRadians()));
			ev[++n] = ev[n - 1] + e.getVelocity() * Math.sin(e.getHeadingRadians() - targetBearing);
			pattern.append(Character.forDigit((int)e.getVelocity() + 8, 20));
			int pointer = pattern.toString().indexOf(pattern.substring(Math.max(pattern.length() - 10, 0))) + 9;
			setTurnGunRightRadians(Math.sin(((ev[Math.min(pointer + (int)e.getDistance() / 11, n)] - ev[pointer]) / e.getDistance () + targetBearing) - getGunHeadingRadians()));
			//setFire(3);
			
			out.println(pointer);
			*/
		}

			
	public void onRobotDeath(RobotDeathEvent e) {
		enemies.remove(e.getName());
	}

	private static Point2D.Double project(Point2D.Double p, double angle, double distance)
	{
		double x = p.x + distance * Math.sin(angle);
		double y = p.y + distance * Math.cos(angle);
		return new Point2D.Double(x, y);
	}
	
	public void onPaint(Graphics2D g) {	
	
		g.setColor(Color.RED);
		g.fillOval((int)enemyP.x-8, (int)enemyP.y-8, 16, 16);
		
		g.setColor(Color.WHITE);
		for (Point2D.Double p : predictions)
		{
			g.fillOval((int) p.x - 2, (int) p.y - 2, 4, 4);
		}
}




	//revise this depending on how much data I want to save
	public class EnemyData {
		double			vel, pVel;
		double			heading, pHeading;
		double			absBearing;
		long			time;		
		//Point2D.Double	pos;
	}
}
